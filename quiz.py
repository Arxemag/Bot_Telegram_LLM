import json
import logging
from aiogram.fsm.state import State, StatesGroup

class QuizStates(StatesGroup):
    waiting_for_theme = State()
    waiting_for_answer = State()

class Quiz:
    def __init__(self):
        self.current_question = None
        self.current_options = None
        self.correct_answer = None
        self.score = 0
        self.current_theme = None
        self.system_prompt = (
            "–í—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. "
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å —á–µ—Ç—ã—Ä—å–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (A, B, C, D) –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É. "
            "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: "
            '{"question": "–≤–æ–ø—Ä–æ—Å", "options": ["A) –≤–∞—Ä–∏–∞–Ω—Ç 1", "B) –≤–∞—Ä–∏–∞–Ω—Ç 2", "C) –≤–∞—Ä–∏–∞–Ω—Ç 3", "D) –≤–∞—Ä–∏–∞–Ω—Ç 4"], "answer": "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"}.'
        )

    async def get_question(self, llm_response):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å, –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM.
        """
        try:
            data = json.loads(llm_response)
            self.current_question = data['question']
            self.current_options = data['options']
            self.correct_answer = data['answer']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            logging.info(f"Question saved: {self.current_question}")
            logging.info(f"Correct answer: {self.correct_answer}")
        except json.JSONDecodeError as e:
            logging.error(f"JSONDecodeError in get_question: {e}")
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM.")

    def check_answer(self, user_answer, correct_answer_text):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        """
        logging.info(f"Checking answer: {user_answer} against {correct_answer_text}")
        if user_answer == correct_answer_text:
            self.score += 1
            return "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ"
        else:
            return f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}"

    def set_theme(self, theme):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–º—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.
        """
        self.current_theme = theme
        return f"–¢–µ–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {theme}"

    def end_quiz(self):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        """
        final_score = self.score
        self.score = 0
        self.current_theme = None
        self.current_question = None
        self.current_options = None
        self.correct_answer = None
        return final_score